#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'shellwords'
require 'datadog_api_client'
require 'json'

require_relative 'lib/ddog'

def shut_down
  puts "\nShutting down gracefully..."
  exit
end

# Trap ^C and Kill
Signal.trap('INT') { shut_down }
Signal.trap('TERM') { shut_down }

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: dd [options]'
  opts.on('-e', '--eu', 'Switch to Datadog EU region') { options[:eu] = true }
  opts.on('-f FILE', '--file=FILE', 'Read arguments from file') { |f| options[:argument_file] = f }
  opts.on('-v', '--[no-]verbose', 'Run verbosely') { options[:verbose] = true }
end.parse!

ddog = DDog.new(options)

if ARGV.length == 1 && ARGV.first == 'help'
  puts <<~HELP
    Available commands:

    #{DDog.help}

  HELP
elsif ARGV.length > 1
  if ARGV.first == 'help'
    module_name = Kernel.const_get(ARGV[1].capitalize)
    puts module_name.send(:help)
    exit
  end
  command = "#{ARGV[0]}_#{ARGV[1]}"
  ARGV.shift(2)
  if options[:argument_file]
    args = ARGV.dup
    args += options[:argument_file] == '-' ? ARGF.readlines : File.readlines(options[:argument_file]).map(&:chomp)
    puts JSON.dump(ddog.execute!(command, args))
  else
    puts JSON.dump(ddog.execute!(command, ARGV))
  end
else
  loop do
    print 'dd> '
    begin
      input = Shellwords.split(ARGF.readline.strip)
      shut_down if input.first.eql? 'exit'
      next if input.first !~ /^[a-z][a-z\s]+/

      if input.include?('|')
        i = input.index('|')
        shell_command = input[(i + 1)..]
        ddog_command = "#{input[0]}_#{input[1]}"
        ddog_args = input[2..i - 1]
        puts "DDOG Command: #{ddog_command} #{ddog_args}" if options[:verbose]
        puts "Shell Command: #{shell_command}" if options[:verbose]
        results = JSON.dump(ddog.execute!(ddog_command, ddog_args))
        IO.popen(shell_command, mode: 'w+', err: %i[child out]) do |pipe_io|
          pipe_io.write results
          pipe_io.close_write
          puts pipe_io.read
        end
      else
        ddog_command = "#{input[0]}_#{input[1]}"
        puts JSON.dump(ddog.execute!(ddog_command, input[2..]))
      end
    rescue EOFError => _e
      shut_down
    end
  end
end
